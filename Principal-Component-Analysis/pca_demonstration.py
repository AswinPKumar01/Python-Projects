# -*- coding: utf-8 -*-
"""PCA Demonstration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nenla60GIskuXdo8iva5xN-E_w2buFmo

**1. Importing Necessary Libraries**
"""

!pip install opendatasets scikit-learn

import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
import pandas as pd

"""**2. Loading the Dataset and Preprocess Data**"""

data = "/content/digit-recognizer/train.csv"  # Specify the correct path

# Load the dataset using pandas
df = pd.read_csv(mnist_csv_file)

# Extract the feature data (pixels) and labels
X = df.iloc[:, 1:].values.astype('float32')
y = df.iloc[:, 0].values

"""**3. Applying PCA and Inverse Transform**"""

# Randomly select an image for demonstration
random_image_index = np.random.randint(0, X.shape[0])

# Define the number of principal components you want to keep
n_components = int(input("Enter the number of components to keep: "))

# Apply PCA to the image data
pca = PCA(n_components=n_components)
X_pca = pca.fit_transform(X)

# Inverse transform to get the reduced-dimension image
X_inverse = pca.inverse_transform(X_pca)

"""**4. Displaying the Original and Reduced Images**"""

# Original image
original_image = X[random_image_index].reshape(28, 28)

# Reduced-dimension image
reduced_image = X_inverse[random_image_index].reshape(28, 28)

# Plot the original and reduced images
plt.figure(figsize=(8, 4))
plt.subplot(1, 2, 1)
plt.imshow(original_image, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(reduced_image, cmap='gray')
plt.title(f'Reduced to {n_components} Components')
plt.axis('off')

plt.show()